{"mappings":"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","sources":["client-src/hooks/cqrpc.js","client-src/hooks/useAsync.js","client-src/hooks/useForceUpdate.js","shared/wait.js"],"sourcesContent":["// Command. Query. Remote. Procedure. Call\nimport { useEffect, useCallback } from 'react'\nimport useSWR from 'swr'\nimport useAsync from './useAsync'\nimport wait from '../../shared/wait.js'\n\nexport async function fetchQuery(name, options = {}){\n  const json = JSON.stringify(options)\n  const params = json === '{}' ? '' :\n    '?' + new URLSearchParams({ o: json })\n  return await apiFetch('GET', `/api/${name}${params}`)\n}\n\nexport async function fetchCommand(name, options){\n  return await apiFetch('POST', `/api/${name}`, options)\n}\n/**/\nglobal.cqrpc = {\n  query: fetchQuery,\n  command: fetchCommand,\n}\n\nasync function apiFetch(method, path, body, tries = 0){\n  const res = await fetch(path, {\n    method,\n    headers: {\n      'Accepts': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: body ? JSON.stringify(body) : undefined,\n  })\n  if (res.status === 502){\n    throw new Error(`API server looks down or you're offline`)\n  }\n  if (res.status === 504 && tries < 5) {\n    await wait(500)\n    return apiFetch(method, path, body, tries + 1)\n  }\n  const { result, error } = await res.json()\n  if (error) throw new Error(error.message)\n  return result || null\n}\n\nexport function useQuery(name, options = {}, config){\n  const swrKey = name ? [name, options] : null\n  const { data: result, error, mutate } = useSWR(swrKey, {\n    ...config,\n    fetcher: fetchQuery,\n  })\n  const loading = typeof result === 'undefined' && !error\n  const reload = useCallback(() => { mutate() }, [mutate])\n  return { result, loading, error, mutate, reload }\n}\n\nexport function useCommand(name, config){\n  return useAsync(\n    options => fetchCommand(name, options),\n    config\n  )\n}\n\nexport function useCommandOnMount(name, options, config){\n  const command = useCommand(name, config)\n  useEffect(\n    () => { if (command.idle) command.call(options) },\n    [name, options]\n  )\n  return command\n}\n","import * as React from 'react'\nimport { useRef, useMemo, useCallback, useEffect } from 'react'\nimport useForceUpdate from './useForceUpdate'\n\nconst STATES = ['idle', 'pending', 'resolved', 'rejected']\nexport default function useAsync(asyncFunction, config = {}){\n  const { callOnMount, onSuccess, onFailure, onComplete } = config\n  const callbacks = useRef()\n  Object.assign(callbacks, { onSuccess, onFailure, onComplete })\n  const forceUpdate = useForceUpdate()\n  const ctx = useMemo(() => ({}), [asyncFunction, callOnMount])\n\n  ctx.call = useCallback(\n    (...args) => {\n      if (ctx.promise) throw new Error(`already executing`)\n      const setState = state => {\n        ctx.state = STATES[state]\n        STATES.forEach((name, index) => {\n          ctx[name] = index === state\n        })\n        forceUpdate()\n      }\n      ctx.promise = new Promise((resolve, reject) => {\n        asyncFunction(...args).then(resolve, reject)\n      }).then(\n        async result => {\n          delete ctx.promise\n          ctx.result = result\n          setState(2)\n          if (callbacks.onSuccess) await callbacks.onSuccess(result)\n          return result\n        },\n        async error => {\n          delete ctx.promise\n          ctx.error = error\n          if (callbacks.onFailure) await callbacks.onFailure(error)\n          setState(3)\n          return error\n        },\n      ).then(async result => {\n        if (callbacks.onComplete) await callbacks.onComplete(result)\n      })\n      setState(1)\n      return ctx.promise\n    },\n    [ctx]\n  )\n\n  useEffect(\n    () => { if (callOnMount && ctx.idle) ctx.call() },\n    [ctx]\n  )\n\n  return ctx\n}\n","import { useState, useCallback, useEffect } from 'react'\n\nconst noop = () => {}\n\nexport default function useForceUpdate(){\n  let setState = useState()[1]\n  useEffect(() => () => { setState = noop }, [])\n  return useCallback(() => { setState({}) }, [])\n}\n","const wait = ms => new Promise(resolve => {\n  setTimeout(() => { resolve() }, ms)\n})\nexport default wait\n"],"names":[],"version":3,"file":"cqrpc.js.map","sourceRoot":"../../"}