{"mappings":";;;;;;;;AAAA;;;;;;ACAA;AAEA,MAAM,6BAAO,IAAM,CAAC;AAEL,oDAAyB;IACtC,IAAI,WAAW,CAAA,GAAA,eAAQ,AAAD,GAAG,CAAC,EAAE;IAC5B,CAAA,GAAA,gBAAQ,EAAE,IAAM,IAAM;YAAE,WAAW;QAAK,GAAG,EAAE;IAC7C,OAAO,CAAA,GAAA,kBAAW,AAAD,EAAE,IAAM;QAAE,SAAS,CAAC;IAAG,GAAG,EAAE;AAC/C;;;ADLe,kDAAsB,OAAO,EAAC;IAC3C,MAAM,cAAc,CAAA,GAAA,wCAAc,AAAD;IACjC,MAAM,CAAC,QAAQ,GAAG,CAAA,GAAA,eAAO,EAAE,KAAK,GAAG,KAAK;IACxC,MAAM,mBAAmB,KAAK,IAAI,CAAC,AAAC,CAAA,UAAU,KAAK,GAAG,EAAC,IAAK;IAC5D,CAAA,GAAA,gBAAS,AAAD,EACN,IAAM;QACJ,MAAM,KAAK,YACT,IAAM;YACJ;YACA,IAAI,KAAK,GAAG,KAAK,SAAW,cAAc;QAC5C,GACA;QAEF,OAAO,IAAM,cAAc;IAC7B,GACA;QAAC;KAAQ;IAEX,OAAO;AACT","sources":["client-src/hooks/useCountdown.js","client-src/hooks/useForceUpdate.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport useForceUpdate from './useForceUpdate.js'\n\nexport default function useCountdown(seconds){\n  const forceUpdate = useForceUpdate()\n  const [endTime] = useState(Date.now() + seconds)\n  const secondsRemaining = Math.ceil((endTime - Date.now()) / 1000)\n  useEffect(\n    () => {\n      const id = setInterval(\n        () => {\n          forceUpdate()\n          if (Date.now() > endTime) { clearInterval(id) }\n        },\n        100\n      )\n      return () => clearInterval(id)\n    },\n    [endTime]\n  )\n  return secondsRemaining\n}","import { useState, useCallback, useEffect } from 'react'\n\nconst noop = () => {}\n\nexport default function useForceUpdate(){\n  let setState = useState()[1]\n  useEffect(() => () => { setState = noop }, [])\n  return useCallback(() => { setState({}) }, [])\n}\n"],"names":[],"version":3,"file":"useCountdown.js.map","sourceRoot":"../../"}