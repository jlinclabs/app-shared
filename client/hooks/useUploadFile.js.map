{"mappings":";;;;;;;;;;;;;ACAA;;;;;;;ACAA;AAEA,MAAM,6BAAO,IAAM,CAAC;AAEL,oDAAyB;IACtC,IAAI,WAAW,CAAA,GAAA,eAAQ,AAAD,GAAG,CAAC,EAAE;IAC5B,CAAA,GAAA,gBAAQ,EAAE,IAAM,IAAM;YAAE,WAAW;QAAK,GAAG,EAAE;IAC7C,OAAO,CAAA,GAAA,kBAAW,AAAD,EAAE,IAAM;QAAE,SAAS,CAAC;IAAG,GAAG,EAAE;AAC/C;;;ADJA,MAAM,+BAAS;IAAC;IAAQ;IAAW;IAAY;CAAW;AAC3C,kDAAkB,aAAa,EAAE,SAAS,CAAC,CAAC,EAAC;IAC1D,MAAM,eAAE,YAAW,aAAE,UAAS,aAAE,UAAS,cAAE,WAAU,EAAE,GAAG;IAC1D,MAAM,YAAY,CAAA,GAAA,aAAM,AAAD;IACvB,OAAO,MAAM,CAAC,WAAW;mBAAE;mBAAW;oBAAW;IAAW;IAC5D,MAAM,cAAc,CAAA,GAAA,wCAAc,AAAD;IACjC,MAAM,MAAM,CAAA,GAAA,cAAM,EAAE,IAAO,CAAA,CAAC,CAAA,GAAI;QAAC;QAAe;KAAY;IAE5D,IAAI,IAAI,GAAG,CAAA,GAAA,kBAAW,AAAD,EACnB,CAAC,GAAG,OAAS;QACX,IAAI,IAAI,OAAO,EAAE,MAAM,IAAI,MAAM,CAAC,iBAAiB,CAAC,EAAC;QACrD,MAAM,WAAW,CAAA,QAAS;YACxB,IAAI,KAAK,GAAG,4BAAM,CAAC,MAAM;YACzB,6BAAO,OAAO,CAAC,CAAC,MAAM,QAAU;gBAC9B,GAAG,CAAC,KAAK,GAAG,UAAU;YACxB;YACA;QACF;QACA,IAAI,OAAO,GAAG,IAAI,QAAQ,CAAC,SAAS,SAAW;YAC7C,iBAAiB,MAAM,IAAI,CAAC,SAAS;QACvC,GAAG,IAAI,CACL,OAAM,SAAU;YACd,OAAO,IAAI,OAAO;YAClB,IAAI,MAAM,GAAG;YACb,SAAS;YACT,IAAI,UAAU,SAAS,EAAE,MAAM,UAAU,SAAS,CAAC;YACnD,OAAO;QACT,GACA,OAAM,QAAS;YACb,OAAO,IAAI,OAAO;YAClB,IAAI,KAAK,GAAG;YACZ,IAAI,UAAU,SAAS,EAAE,MAAM,UAAU,SAAS,CAAC;YACnD,SAAS;YACT,OAAO;QACT,GACA,IAAI,CAAC,OAAM,SAAU;YACrB,IAAI,UAAU,UAAU,EAAE,MAAM,UAAU,UAAU,CAAC;QACvD;QACA,SAAS;QACT,OAAO,IAAI,OAAO;IACpB,GACA;QAAC;KAAI;IAGP,CAAA,GAAA,gBAAS,AAAD,EACN,IAAM;QAAE,IAAI,eAAe,IAAI,IAAI,EAAE,IAAI,IAAI;IAAG,GAChD;QAAC;KAAI;IAGP,OAAO;AACT;;ADtDA;;;;AGAO,eAAe,0CAAW,IAAI,EAAC;IACpC,MAAM,cAAc,0CAAW,mBAAmB,IAAI;IACtD,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAC;IAC9C,IAAI,KAAK,IAAI,GAAI,cAAe,SAC9B,MAAM,IAAI,MACR,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,2CAA2C,CAAC,GAC1D,CAAC,KAAK,EAAE,YAAY,GAAG,CAAC,EACzB;IACH,MAAM,WAAW,IAAI;IACrB,SAAS,MAAM,CAAC,QAAQ;IACxB,MAAM,WAAW,MAAM,MACrB,CAAC,YAAY,CAAC,EACd;QAAC,QAAQ;QAAQ,MAAM;IAAQ;IAEjC,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM,CAAC,mBAAmB,EAAE,SAAS,UAAU,CAAC,CAAC,EAAC;IAE9D,MAAM,SAAE,MAAK,OAAE,IAAG,EAAE,GAAG,MAAM,SAAS,IAAI;IAC1C,IAAI,OAAO,MAAM,IAAI,MAAM,OAAM;IACjC,OAAO;AACT;AACA,0CAAW,mBAAmB,GAAG;;;AHlB1B,SAAS,0CAAc,MAAM,EAAC;IACnC,OAAO,CAAA,GAAA,wCAAO,EAAE,CAAA,GAAA,yCAAU,AAAD,GAAG;AAC9B","sources":["client-src/hooks/useUploadFile.js","client-src/hooks/useAsync.js","client-src/hooks/useForceUpdate.js","client-src/lib/uploads.js"],"sourcesContent":["import useAsync from './useAsync.js'\nimport { uploadFile } from '../lib/uploads.js'\n\nexport function useUploadFile(config){\n  return useAsync(uploadFile, config)\n}\n","import * as React from 'react'\nimport { useRef, useMemo, useCallback, useEffect } from 'react'\nimport useForceUpdate from './useForceUpdate'\n\nconst STATES = ['idle', 'pending', 'resolved', 'rejected']\nexport default function useAsync(asyncFunction, config = {}){\n  const { callOnMount, onSuccess, onFailure, onComplete } = config\n  const callbacks = useRef()\n  Object.assign(callbacks, { onSuccess, onFailure, onComplete })\n  const forceUpdate = useForceUpdate()\n  const ctx = useMemo(() => ({}), [asyncFunction, callOnMount])\n\n  ctx.call = useCallback(\n    (...args) => {\n      if (ctx.promise) throw new Error(`already executing`)\n      const setState = state => {\n        ctx.state = STATES[state]\n        STATES.forEach((name, index) => {\n          ctx[name] = index === state\n        })\n        forceUpdate()\n      }\n      ctx.promise = new Promise((resolve, reject) => {\n        asyncFunction(...args).then(resolve, reject)\n      }).then(\n        async result => {\n          delete ctx.promise\n          ctx.result = result\n          setState(2)\n          if (callbacks.onSuccess) await callbacks.onSuccess(result)\n          return result\n        },\n        async error => {\n          delete ctx.promise\n          ctx.error = error\n          if (callbacks.onFailure) await callbacks.onFailure(error)\n          setState(3)\n          return error\n        },\n      ).then(async result => {\n        if (callbacks.onComplete) await callbacks.onComplete(result)\n      })\n      setState(1)\n      return ctx.promise\n    },\n    [ctx]\n  )\n\n  useEffect(\n    () => { if (callOnMount && ctx.idle) ctx.call() },\n    [ctx]\n  )\n\n  return ctx\n}\n","import { useState, useCallback, useEffect } from 'react'\n\nconst noop = () => {}\n\nexport default function useForceUpdate(){\n  let setState = useState()[1]\n  useEffect(() => () => { setState = noop }, [])\n  return useCallback(() => { setState({}) }, [])\n}\n","export async function uploadFile(file){\n  const maxFileSize = uploadFile.MAX_FILE_SIZE_IN_MB || 200\n  if (!file) throw new Error(`file is required`)\n  if (file.size > (maxFileSize  * 1000000))\n    throw new Error(\n      `\"${file.name}\" is too big. Please select a file smaller ` +\n      `than ${maxFileSize}mb.`\n    )\n  const formData = new FormData()\n  formData.append('file', file)\n  const response = await fetch(\n    `/api/uploads`,\n    {method: 'POST', body: formData}\n  )\n  if (!response.ok){\n    throw new Error(`file upload failed ${response.statusCode}`)\n  }\n  const { error, url } = await response.json()\n  if (error) throw new Error(error)\n  return url\n}\nuploadFile.MAX_FILE_SIZE_IN_MB = 200"],"names":[],"version":3,"file":"useUploadFile.js.map","sourceRoot":"../../"}