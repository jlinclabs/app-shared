{"mappings":"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","sources":["client-src/lib/imageHelpers.js"],"sourcesContent":["export function resizeToFill({ canvasWidth, canvasHeight, imageHeight, imageWidth }) {\n  let drawnWidth, drawnHeight, x, y\n\n  if (imageHeight < canvasHeight && imageWidth < canvasWidth) {\n    drawnWidth = imageWidth\n    drawnHeight = imageHeight\n    x = (canvasWidth - drawnWidth) / 2\n    y = (canvasHeight - drawnHeight) / 2\n  } else if ((imageWidth / canvasWidth) > (imageHeight / canvasHeight)) {\n    drawnWidth = (canvasHeight / imageHeight) * imageWidth\n    drawnHeight = canvasHeight\n    x = (canvasWidth - drawnWidth) / 2\n    y = 0\n  } else {\n    drawnWidth = canvasWidth\n    drawnHeight = (canvasWidth / imageWidth) * imageHeight\n    x = 0\n    y = (canvasHeight - drawnHeight) / 2\n  }\n  return { x, y, drawnWidth, drawnHeight }\n}\n\nexport function resizeToFit({ canvasWidth, canvasHeight, imageHeight, imageWidth }){\n  let drawnWidth, drawnHeight\n\n  if (imageHeight < canvasHeight && imageWidth < canvasWidth) {\n    drawnWidth = imageWidth\n    drawnHeight = imageHeight\n  } else {\n    const ratio = (imageHeight / canvasHeight) > (imageWidth / canvasWidth)\n      ? imageHeight / canvasHeight\n      : imageWidth / canvasWidth\n\n    drawnWidth = imageWidth / ratio\n    drawnHeight = imageHeight / ratio\n  }\n\n  const x = drawnWidth < canvasWidth ? (canvasWidth - drawnWidth) / 2 : 0\n  const y = drawnHeight < canvasHeight ? (canvasHeight - drawnHeight) / 2 : 0\n  return { x, y, drawnWidth, drawnHeight }\n}\n\n\nexport function fileToImageDataURL(file){\n  return new Promise((resolve, reject) => {\n    const reader = new global.FileReader()\n    reader.onload = () => {\n      resolve(reader.result)\n    }\n    reader.onerror = () => {\n      reject(reader.error)\n    }\n    reader.readAsDataURL(file)\n  })\n}\n\nexport function loadImage(src){\n  return new Promise((resolve, reject) => {\n    const image = new global.Image()\n    image.onload = function(){ resolve(image) }\n    image.onerror = function(error){\n      if (!(error instanceof Error)){\n        console.error(error)\n        error = new Error(`Error loading image`)\n      }\n      reject(error)\n    }\n    image.setAttribute('crossOrigin', 'anonymous')\n    image.src = src\n  })\n}\n\nexport function imageToDataURL(image, options = {}){\n  const {\n    type = 'image/png',\n    encoderOptions,\n  } = options\n  const canvas = global.document.createElement('canvas')\n  canvas.width = image.naturalWidth\n  canvas.height = image.naturalHeight\n  const ctx = canvas.getContext('2d')\n  ctx.drawImage(image, 0, 0)\n  return canvas.toDataURL(type, encoderOptions)\n}\n\nexport async function deanimateImage(image, options = {}){\n  if (!image.src.match(/data:image\\/(gif|webp)/)) return image\n  const src = imageToDataURL(image, options)\n  return await loadImage(src)\n}\n\nexport async function fileToImage(file){\n  return await loadImage(\n    await fileToImageDataURL(file)\n  )\n}\n\nexport async function resizeImage({\n  image,\n  dataUri,\n  height,\n  width,\n  resizeTo,\n  type = 'image/png',\n  encoderOptions,\n}){\n  if (dataUri) image = await loadImage(dataUri)\n  const onResize = resizeTo === 'fill' ? resizeToFill : resizeToFit\n  const canvas = global.document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n  const context = canvas.getContext('2d')\n  const {x, y, drawnWidth, drawnHeight} = onResize({\n    canvasWidth: width,\n    canvasHeight: height,\n    imageHeight: image.height,\n    imageWidth: image.width,\n  })\n\n  context.drawImage(image, x, y, drawnWidth, drawnHeight)\n\n  return canvas.toDataURL(type, encoderOptions)\n}\n\nexport const aspectRatioToTopPadding = (height, width) => `${(height / width) * 100}%`\n\n// https://stackoverflow.com/questions/12168909/blob-from-dataurl\nexport function dataURItoFile(dataURI) {\n  const matches = dataURI.match(/^data:(.+?);base64,(.+)$/)\n  const type = matches[1]\n  const byteString = atob(matches[2])\n  // write the bytes of the string to an ArrayBuffer\n  const arrayBuffer = new ArrayBuffer(byteString.length)\n  // create a view into the buffer\n  const intArray = new Uint8Array(arrayBuffer)\n  // set the bytes of the buffer to the correct values\n  for (let i = 0; i < byteString.length; i++)\n    intArray[i] = byteString.charCodeAt(i)\n  const fileName = `file.${type.split('/')[1]}`\n  // write the ArrayBuffer to a blob, and you're done\n  return new File([arrayBuffer], fileName, {type})\n}\n"],"names":[],"version":3,"file":"imageHelpers.js.map","sourceRoot":"../../"}