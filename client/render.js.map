{"mappings":"knCAEkB,EAAAA,EAAAC,aAAY,CAC5BC,QAAS,CACPC,KAAM,UCAV,MAAMC,EAAOC,EAAAC,YAAiB,KAAKC,GAAQC,KACzCD,EAAME,UAAY,IACdF,EAAMG,KACRH,EAAME,UAAYE,EAAAC,MAEhBL,EAAMG,IAAMH,EAAMG,GAAGG,WAAW,UAClCN,EAAMO,KAAOP,EAAMG,UACZH,EAAMG,GACbH,EAAMQ,IAAMR,EAAMQ,KAAO,sBACzBR,EAAMS,OAAST,EAAMS,QAAU,SAC/BT,EAAME,UAAY,MAEb,EAAAQ,EAAAC,KAACC,EAAAC,GAAO,IAAKb,EAAOC,IAAKA,OAGlCJ,EAAKiB,YAAc,OCfZC,eAAeC,EAAWC,EAAMC,EAAU,IAC/C,MAAMC,EAAS,IAAIC,gBAAgBF,GACnC,aAAaG,EAAS,MAAO,QAAQJ,KAAQE,I,CAGxCJ,eAAeO,EAAaL,EAAMC,GACvC,aAAaG,EAAS,OAAQ,QAAQJ,IAAQC,E,CAQhDH,eAAeM,EAASE,EAAQC,EAAMC,EAAMC,EAAQ,GAClD,MAAMC,QAAYC,MAAMJ,EAAM,C,OAC5BD,EACAM,QAAS,CACPC,QAAW,mBACX,eAAgB,oBAElBL,KAAMA,EAAOM,KAAKC,UAAUP,QAAQQ,IAEtC,GAAmB,MAAfN,EAAIO,OACN,MAAM,IAAIC,MAAM,2CAElB,GAAmB,MAAfR,EAAIO,QAAkBR,EAAQ,EAEhC,aADMU,EAAK,KACJf,EAASE,EAAQC,EAAMC,EAAMC,EAAQ,GAE9C,MAAMW,OAAEA,EAAMC,MAAEA,SAAgBX,EAAIY,OACpC,GAAID,EAAO,MAAM,IAAIH,MAAMG,EAAME,SACjC,OAAOH,GAAU,I,CAvBnBI,OAAOC,KAAO,CACZC,MAAO3B,EACP4B,QAAStB,GAwBX,MAAMc,EAAOS,GAAM,IAAIC,SAAQC,IAC7BC,YAAW,KAAQD,GAAS,GAAIF,EAAG,IC5BxBjC,EAAAqC,GAASC,WAAWC,SAASC,cAAc","sources":["client-src/theme.js","client-src/components/Link.js","client-src/cqrs.js","client-src/render.js"],"sourcesContent":["import { createTheme } from '@mui/material/styles'\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n    // primary: {\n    //   main: `${process.env.REACT_APP_COLOR}`,\n    // },\n    // secondary: {\n\n    // }\n  },\n})\n\nexport default darkTheme\n\n","import * as React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport MUILink from '@mui/material/Link'\n\nconst Link = React.forwardRef(({...props}, ref) => {\n  props.component = 'a'\n  if (props.to){\n    props.component = RouterLink\n  }\n  if (props.to && props.to.startsWith('http')){\n    props.href = props.to\n    delete props.to\n    props.rel = props.rel || \"noopener noreferrer\"\n    props.target = props.target || \"_blank\"\n    props.component = 'a'\n  }\n  return <MUILink {...props} ref={ref}/>\n})\n\nLink.displayName = 'Link'\n\nexport default Link\n","import { useEffect, useCallback } from 'react'\nimport useSWR, { useSWRConfig } from 'swr'\nimport useAsync from './hooks/useAsync'\n\nexport async function fetchQuery(name, options = {}){\n  const params = new URLSearchParams(options)\n  return await apiFetch('GET', `/api/${name}?${params}`)\n}\n\nexport async function fetchCommand(name, options){\n  return await apiFetch('POST', `/api/${name}`, options)\n}\n\nwindow.cqrs = {\n  query: fetchQuery,\n  command: fetchCommand,\n}\n\nasync function apiFetch(method, path, body, tries = 0){\n  const res = await fetch(path, {\n    method,\n    headers: {\n      'Accepts': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: body ? JSON.stringify(body) : undefined,\n  })\n  if (res.status === 502){\n    throw new Error(`API server looks down or you're offline`)\n  }\n  if (res.status === 504 && tries < 5) {\n    await wait(500)\n    return apiFetch(method, path, body, tries + 1)\n  }\n  const { result, error } = await res.json()\n  if (error) throw new Error(error.message)\n  return result || null\n}\n\nconst wait = ms => new Promise(resolve => {\n  setTimeout(() => { resolve() }, ms)\n})\n\nexport function useQuery(name, options = {}, config){\n  const swrKey = name ? [name, options] : null\n  const { data: result, error, mutate } = useSWR(swrKey, {\n    ...config,\n    fetcher: fetchQuery,\n  })\n  const loading = typeof result === 'undefined' && !error\n  const reload = useCallback(() => { mutate() }, [mutate])\n  return { result, loading, error, mutate, reload }\n}\n\nexport function useCommand(name, config){\n  return useAsync(\n    options => fetchCommand(name, options),\n    config\n  )\n}\n\nexport function useCommandOnMount(name, options, config){\n  const command = useCommand(name, config)\n  useEffect(\n    () => { if (command.idle) command.call(options) },\n    [name, options]\n  )\n  return command\n}\n","import * as React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { ThemeProvider, CssBaseline } from '@mui/material'\n\nimport defaultTheme from './theme'\nimport DebugPage from './pages/DebugPage'\nimport NotFoundPage from './pages/NotFoundPage'\nimport './cqrs'\n// import App from './App'\n// import reportWebVitals from './reportWebVitals'\n\nconst root = ReactDOM.createRoot(document.querySelector('body > main'))\n\nexport default function render(opts = {}){\n  const {\n    Routes,\n    theme = defaultTheme,\n  } = opts\n  root.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <ThemeProvider {...{theme}}>\n          <CssBaseline enableColorScheme />\n          <Routes>\n            <Route path=\"/debug/*\" element={<DebugPage/>}/>\n            <Route path=\"*\" element={<NotFoundPage/>}/>\n          </Routes>\n        </ThemeProvider>\n      </BrowserRouter>\n    </React.StrictMode>\n  )\n}\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log)\n"],"names":["$9A0Ud$muimaterialstyles","createTheme","palette","mode","$2b15cd7b7a77e9f0$var$Link","$9A0Ud$react","forwardRef","props","ref","component","to","$9A0Ud$reactrouterdom","Link","startsWith","href","rel","target","$9A0Ud$reactjsxruntime","jsx","$parcel$interopDefault","$9A0Ud$muimaterialLink","displayName","async","$8b171cd0def0b2b8$export$a1c549e76b7f385e","name","options","params","URLSearchParams","$8b171cd0def0b2b8$var$apiFetch","$8b171cd0def0b2b8$export$df781a4386db1cc8","method","path","body","tries","res","fetch","headers","Accepts","JSON","stringify","undefined","status","Error","$8b171cd0def0b2b8$var$wait","result","error","json","message","window","cqrs","query","command","ms","Promise","resolve","setTimeout","$9A0Ud$reactdomclient","createRoot","document","querySelector"],"version":3,"file":"render.js.map","sourceRoot":"../"}